kstacksampler.sh - poor man's profiler for kernel stack trace profiling for Linux

What it does: it reads from /proc/pid/stack at regular intervals and prints the output to stdout      
Use it to investigate processes that are spending most of their time off CPU and/or in system calls.
This script is intended to be used together with flame graphs https://github.com/brendangregg/FlameGraph

Notes: 
 - this is a basic script, consider it as a proof of concept/study material.
 - the overhead on the measured system is expected to be low when used with care.
 - for CPU-bound processes use rather perf for stack profiling and On-CPU flame graph techniques.
 - the use of shell for profiling does not allow for high frequency
 - stacks are captured "in flight" using the /proc filesystem this minimizes the risk but also reduces accuracy
 - stack values and process state are read in two different calls, they may not match if the process state changes
 - the script traces one process (although it could be adapted to trace multiple pids)
 - the script does not trace threads (although it can be modified to trace tids from /proc/pid/task/tid/stack)
 - the script does not provide userspace traces
 - processes state "running" refers to both running and runnable (in run queue)  
                  
Example of usage together with Flamegraphs: 
 ./kstacksampler.sh -p 1234 -n 10 -i .05 | grep -v 0xffffffffffffffff | sed 's/State:\t//g'| sed 's/\[<.*>] //g' | ../FlameGraph/stackcollapse-stap.pl | ../FlameGraph/flamegraph.pl

Author Luca.Canali@cern.ch
First release, October 2015

See also blog post:
http://externaltable.blogspot.com/2015/10/linux-kernel-stack-profiling-and-flame.html

Additional credits and ideas who have inspired this: 
 Brendan Gregg ->
   http://www.brendangregg.com/FlameGraphs/offcpuflamegraphs.html
 Tanel Poder   -> 
   http://blog.tanelpoder.com/2013/02/21/peeking-into-linux-kernel-land-using-proc-filesystem-for-quickndirty-troubleshooting/

